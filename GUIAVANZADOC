# Asegúrate de instalar las siguientes bibliotecas antes de ejecutar el script:
# pip install onnxruntime rembg numpy Pillow opencv-python

import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk, ImageDraw, ImageEnhance
from rembg import remove, new_session
import numpy as np
import os
import io

# Crear una sesión con el modelo "u2net_human_seg"
session = new_session('u2net_human_seg')

class ImageEditor:
    def __init__(self, master):
        self.master = master
        self.master.title("Background Remover Avanzado por ViajaTech")
        self.master.geometry("1200x800")  # Aumentar el tamaño para mejor visualización

        # Frame para los botones
        self.button_frame = tk.Frame(master)
        self.button_frame.pack(pady=10)

        # Botones
        self.select_button = tk.Button(self.button_frame, text="Seleccionar Imágenes", command=self.select_images, width=20)
        self.select_button.grid(row=0, column=0, padx=5)

        self.clear_button = tk.Button(self.button_frame, text="Limpiar Lista", command=self.clear_list, width=20)
        self.clear_button.grid(row=0, column=1, padx=5)

        self.process_button = tk.Button(self.button_frame, text="Procesar Fondos", command=self.remove_backgrounds, width=20)
        self.process_button.grid(row=0, column=2, padx=5)

        self.save_button = tk.Button(self.button_frame, text="Guardar Imagen", command=self.save_image, width=20, state=tk.DISABLED)
        self.save_button.grid(row=0, column=3, padx=5)

        # Listbox para mostrar los archivos seleccionados
        self.listbox = tk.Listbox(master, selectmode=tk.SINGLE, width=100, height=10)
        self.listbox.pack(pady=10)
        self.listbox.bind('<<ListboxSelect>>', self.display_selected_image)

        # Canvas para mostrar y editar la imagen
        self.canvas = tk.Canvas(master, cursor="cross", bg='grey')
        self.canvas.pack(fill=tk.BOTH, expand=True)
        self.canvas_image = None
        self.current_image = None
        self.current_image_resized = None
        self.mask = None
        self.overlay = None  # Superposición para visualización
        self.draw_mask = None
        self.draw_overlay = None
        self.drawing = False
        self.last_x, self.last_y = None, None
        self.brush_size = 15  # Tamaño del pincel ajustado para mejor visibilidad
        self.brush_color = 'red'  # Color de la superposición

        # Variables para gestionar múltiples imágenes
        self.images = []
        self.processed_images = {}
        self.masks = {}  # Almacenar máscaras por imagen

    def select_images(self):
        file_paths = filedialog.askopenfilenames(
            title="Seleccionar Imágenes",
            filetypes=[("Archivos de Imagen", "*.png;*.jpg;*.jpeg;*.bmp")]
        )
        if file_paths:
            for file_path in file_paths:
                if file_path not in self.images:
                    self.images.append(file_path)
                    self.listbox.insert(tk.END, file_path)

    def clear_list(self):
        self.listbox.delete(0, tk.END)
        self.images.clear()
        self.canvas.delete("all")
        self.current_image = None
        self.current_image_resized = None
        self.processed_images.clear()
        self.masks.clear()
        self.save_button.config(state=tk.DISABLED)

    def display_selected_image(self, event):
        selection = self.listbox.curselection()
        if selection:
            index = selection[0]
            image_path = self.listbox.get(index)
            image = Image.open(image_path).convert("RGBA")
            self.current_image = image
            self.current_image_resized = image.copy()
            self.processed_images[image_path] = image.copy()

            # Inicializar máscara y superposición para esta imagen si no existen
            if image_path not in self.masks:
                self.masks[image_path] = Image.new("L", image.size, 0)  # Todo transparente
            self.draw_mask = ImageDraw.Draw(self.masks[image_path])

            # Inicializar superposición (semi-transparente)
            self.overlay = Image.new("RGBA", image.size, (255, 0, 0, 0))  # Inicialmente transparente
            self.draw_overlay = ImageDraw.Draw(self.overlay)

            self.display_image_on_canvas(image)
            self.save_button.config(state=tk.NORMAL)

    def display_image_on_canvas(self, image):
        # Redimensionar la imagen para que quepa en el canvas
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        if canvas_width < 10 or canvas_height < 10:
            # Valores por defecto si el canvas aún no se ha renderizado
            canvas_width = 1000
            canvas_height = 700
        image_ratio = image.width / image.height
        canvas_ratio = canvas_width / canvas_height
        if image_ratio > canvas_ratio:
            new_width = canvas_width
            new_height = int(canvas_width / image_ratio)
        else:
            new_height = canvas_height
            new_width = int(canvas_height * image_ratio)
        resized_image = image.resize((new_width, new_height), Image.Resampling.LANCZOS if hasattr(Image, 'Resampling') else Image.ANTIALIAS)
        self.current_image_resized = resized_image
        self.tk_image = ImageTk.PhotoImage(resized_image)

        # Crear una copia para la superposición
        if self.overlay:
            resized_overlay = self.overlay.resize((new_width, new_height), Image.Resampling.LANCZOS if hasattr(Image, 'Resampling') else Image.ANTIALIAS)
            self.tk_overlay = ImageTk.PhotoImage(resized_overlay)

            # Combinar la imagen y la superposición
            combined = Image.alpha_composite(resized_image, resized_overlay)
            self.tk_combined = ImageTk.PhotoImage(combined)
            self.canvas.delete("all")
            self.canvas_image = self.canvas.create_image(
                canvas_width//2, canvas_height//2, anchor=tk.CENTER, image=self.tk_combined
            )
        else:
            self.canvas.delete("all")
            self.canvas_image = self.canvas.create_image(
                canvas_width//2, canvas_height//2, anchor=tk.CENTER, image=self.tk_image
            )

        self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))

        # Vincular eventos del mouse para la selección
        self.canvas.bind("<ButtonPress-1>", self.on_button_press)
        self.canvas.bind("<B1-Motion>", self.on_paint)
        self.canvas.bind("<ButtonRelease-1>", self.on_button_release)

    def on_button_press(self, event):
        if self.current_image:
            self.drawing = True
            self.last_x, self.last_y = event.x, event.y

    def on_paint(self, event):
        if self.drawing and self.current_image:
            x, y = event.x, event.y
            # Convertir coordenadas del canvas a las de la imagen original
            canvas_bbox = self.canvas.bbox(self.canvas_image)
            if not canvas_bbox:
                return
            canvas_width = self.canvas.winfo_width()
            canvas_height = self.canvas.winfo_height()
            img_width, img_height = self.current_image.size
            image_ratio = img_width / img_height
            canvas_ratio = canvas_width / canvas_height
            if image_ratio > canvas_ratio:
                display_width = canvas_width
                display_height = int(canvas_width / image_ratio)
            else:
                display_height = canvas_height
                display_width = int(canvas_height * image_ratio)
            scale_x = img_width / display_width
            scale_y = img_height / display_height

            # Coordenadas relativas al centro
            rel_x = (x - (canvas_width - display_width) / 2) * scale_x
            rel_y = (y - (canvas_height - display_height) / 2) * scale_y

            if 0 <= rel_x < img_width and 0 <= rel_y < img_height:
                image_path = self.listbox.get(self.listbox.curselection())

                # Dibujar en la máscara
                self.draw_mask.ellipse(
                    (rel_x - self.brush_size, rel_y - self.brush_size,
                     rel_x + self.brush_size, rel_y + self.brush_size),
                    fill=255
                )

                # Dibujar en la superposición
                self.draw_overlay.ellipse(
                    (rel_x - self.brush_size, rel_y - self.brush_size,
                     rel_x + self.brush_size, rel_y + self.brush_size),
                    fill=(255, 0, 0, 100)  # Rojo semi-transparente
                )

                # Actualizar la visualización
                self.update_canvas_with_overlay(display_width, display_height)

    def on_button_release(self, event):
        self.drawing = False

    def update_canvas_with_overlay(self, display_width, display_height):
        if self.current_image and self.overlay:
            # Redimensionar imágenes
            resized_image = self.current_image.resize((display_width, display_height), Image.Resampling.LANCZOS if hasattr(Image, 'Resampling') else Image.ANTIALIAS)
            resized_overlay = self.overlay.resize((display_width, display_height), Image.Resampling.LANCZOS if hasattr(Image, 'Resampling') else Image.ANTIALIAS)

            # Combinar la imagen y la superposición
            combined = Image.alpha_composite(resized_image, resized_overlay)
            self.tk_combined = ImageTk.PhotoImage(combined)

            # Actualizar el Canvas
            self.canvas.itemconfig(self.canvas_image, image=self.tk_combined)

    def remove_backgrounds(self):
        if not self.images:
            messagebox.showwarning("Advertencia", "No hay imágenes seleccionadas.")
            return
        output_dir = filedialog.askdirectory(title="Seleccionar Carpeta de Salida")
        if not output_dir:
            return
        for image_path in self.images:
            try:
                with open(image_path, "rb") as inp_file:
                    input_data = inp_file.read()
                    # Usar la sesión creada con el modelo deseado
                    output_data = remove(input_data, session=session)
                    output_image = Image.open(io.BytesIO(output_data)).convert("RGBA")

                    # Si el usuario ha hecho una selección, aplicar la máscara
                    if image_path in self.masks:
                        mask = self.masks[image_path]
                        # Redimensionar la máscara al tamaño de output_image si es necesario
                        if mask.size != output_image.size:
                            mask_resized = mask.resize(output_image.size, Image.Resampling.LANCZOS if hasattr(Image, 'Resampling') else Image.ANTIALIAS)
                        else:
                            mask_resized = mask
                        # Aplicar la máscara: mantener solo las áreas seleccionadas
                        output_image.putalpha(mask_resized)

                    output_path = os.path.join(output_dir, f"bg_removed_{os.path.basename(image_path)}")
                    output_image.save(output_path)
            except Exception as e:
                messagebox.showerror("Error", f"No se pudo procesar {image_path}: {e}")
        messagebox.showinfo("Éxito", "¡Fondos eliminados exitosamente!")

    def save_image(self):
        if not self.current_image:
            messagebox.showwarning("Advertencia", "No hay imagen para guardar.")
            return
        save_path = filedialog.asksaveasfilename(
            defaultextension=".png",
            filetypes=[("PNG", "*.png"), ("JPEG", "*.jpg;*.jpeg"), ("BMP", "*.bmp")],
            title="Guardar Imagen"
        )
        if save_path:
            image_path = self.listbox.get(self.listbox.curselection())
            try:
                # Aplicar la máscara antes de guardar
                with open(image_path, "rb") as inp_file:
                    input_data = inp_file.read()
                    output_data = remove(input_data, session=session)
                    output_image = Image.open(io.BytesIO(output_data)).convert("RGBA")

                    mask = self.masks.get(image_path)
                    if mask:
                        if mask.size != output_image.size:
                            mask_resized = mask.resize(output_image.size, Image.Resampling.LANCZOS if hasattr(Image, 'Resampling') else Image.ANTIALIAS)
                        else:
                            mask_resized = mask
                        output_image.putalpha(mask_resized)
                    else:
                        messagebox.showwarning("Advertencia", "No hay máscara para esta imagen. Se guardará la imagen sin modificaciones.")

                    output_image.save(save_path)
                    messagebox.showinfo("Éxito", f"Imagen guardada en {save_path}")
            except Exception as e:
                messagebox.showerror("Error", f"No se pudo guardar la imagen: {e}")

def main():
    root = tk.Tk()
    app = ImageEditor(root)
    root.mainloop()

if __name__ == "__main__":
    main()
